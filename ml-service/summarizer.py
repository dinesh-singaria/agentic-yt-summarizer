import os
from dotenv import load_dotenv
from phi.agent import Agent, RunResponse
from phi.model.google import Gemini
from phi.tools.duckduckgo import DuckDuckGo
# from phi.model.openai import OpenAI
from dotenv import load_dotenv

load_dotenv()

# Confirm the environment variable is loaded correctly
if not os.getenv("GEMINI_API_KEY"):
    raise RuntimeError(" GEMINI_API_KEY not found in environment")

# Summarizer agent
summarizer_agent = Agent(
    name="SummarizerAgent",
    model=Gemini(id="gemini-2.0-flash-exp"),
    # model=OpenAI(id="gpt-4-turbo"),
    tools=[DuckDuckGo()],
    markdown=True  # summaries prefer plain text
)

def summarize(transcript: str, prompt: str, captions: list[str] = None) -> str:
    """
    Run a prompt through the Gemini agent with optional scene captions.

    Parameters:
        transcript: Full transcript text
        prompt: Instruction prompt from user
        captions: List of visual scene captions from keyframes (optional)

    Returns:
        A summary generated by the Gemini agent.
    """
    visual_text = ""
    if captions:
        visual_text = "\n\nScene Descriptions:\n"
        for idx, caption in enumerate(captions, 1):
            visual_text += f"Scene {idx}: {caption}\n"

    full_prompt = f"{prompt.strip()}\n\nTranscript:\n{transcript.strip()}{visual_text}"

    run: RunResponse = summarizer_agent.run(full_prompt)
    return run.content